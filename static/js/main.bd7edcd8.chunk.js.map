{"version":3,"sources":["TodoItem.js","App.js","index.js"],"names":["TodoItem","_ref","todo","react_default","a","createElement","id","title","completed","user","name","API_URL","delay","Promise","resolve","setTimeout","getTodos","then","fetch","concat","response","ok","json","catch","getUsers","App","_useState","useState","_useState2","Object","slicedToArray","todos","setTodos","_useState3","_useState4","isLoading","setLoaing","_useState5","_useState6","sortType","setSort","sortTableBy","toConsumableArray","reverse","sort","b","localeCompare","toString","className","length","style","cursor","onClick","map","src_TodoItem","type","_ref2","todosFromServer","usersFromServer","regenerator_default","async","_context","prev","next","awrap","all","sent","objectSpread2","find","userId","stop","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.bd7edcd8.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TodoItem = ({ todo }) => (\n  <tr>\n  <th>{todo.id}</th>\n  <th>{todo.title}</th>\n  <th>{todo.completed ? '✅' : '❌'}</th>\n  <th>{todo.user.name}</th>\n</tr>\n);\n\nTodoItem.propTypes = { todo: PropTypes.string.isRequired };\n\nexport default TodoItem;\n","import React, { useState } from 'react';\nimport './App.css';\nimport TodoItem from './TodoItem'\nconst API_URL = 'https://jsonplaceholder.typicode.com';\nconst delay = () => new Promise((resolve) => {\n  setTimeout(resolve, 500);\n});\n\nconst getTodos = () => {\n  return delay()\n    .then(() => fetch(`${API_URL}/todos`))\n    .then(response => response.ok ? response.json() : [])\n    .catch(() => []);\n};\n\nconst getUsers = () => {\n  return delay()\n    .then(() => fetch(`${API_URL}/users`))\n    .then(response => {\n      return response.ok ? response.json() : []\n    })\n    .catch(() => []);\n};\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [isLoading, setLoaing] = useState(false);\n  const [sortType, setSort] = useState('');\n  const loadData = async () => {\n    setLoaing(true);\n    const [\n      todosFromServer,\n      usersFromServer\n    ] = await Promise.all([\n      getTodos(),\n      getUsers()\n    ]);\n    setTodos(todosFromServer.map(todo => ({\n      ...todo,\n      user: usersFromServer.find(user => todo.userId === user.id)\n    })));\n  };\n\n  const sortTableBy = (title) => {\n    if (sortType === title) {\n      setTodos([...todos].reverse());\n    } else {\n      switch (title) {\n        case 'id':\n          setTodos([...todos]\n            .sort((a, b) => a.id - b.id));\n          break;\n        case 'title':\n          setTodos([...todos]\n            .sort((a, b) => a.title.localeCompare(b.title)));\n          break;\n        case 'user':\n          setTodos([...todos]\n            .sort((a, b) => a.user.name.localeCompare(b.user.name)));\n          break;\n        case 'completed':\n          setTodos([...todos]\n            .sort((a, b) => b.completed.toString().localeCompare(\n              a.completed.toString())));\n          break;\n        default:\n      }\n      setSort(title);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Dynamic list of todos</h1>\n      {todos.length > 0 ? (\n        <table>\n          <tr>\n            <th style={{ cursor: 'pointer' }} onClick={() => sortTableBy('id')} >\n              Sort by Id\n            </th>\n            <th style={{ cursor: 'pointer' }} onClick={() => sortTableBy('title')}>\n              Sort by Title\n            </th>\n            <th style={{ cursor: 'pointer' }} onClick={() => sortTableBy('completed')}>\n              Sort if is completed\n            </th>\n            <th style={{ cursor: 'pointer' }} onClick={() => sortTableBy('user')}>\n              Sort by Name\n            </th>\n          </tr>\n          {todos.map(todo => (\n\n            <TodoItem todo={todo} />\n          ))}\n        </table>\n      ) : (\n          <button type=\"button\" onClick={loadData}>\n            {isLoading ? 'Loading...' : 'Load'}\n          </button>\n        )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}